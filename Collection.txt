Concurrent collection : https://medium.com/thefreshwrites/concurrent-collection-in-java-ee9af58fb9ce
		in Java refers to a set of classes that allow multiple threads to access and modify a collection concurrently, without the need for explicit
		synchronization. These collections are part of the java.util.concurrent package and provide thread-safe implementations of the traditional
		collection interfaces like List, Set, and Map.
		
		Before the introduction of concurrent collections, programmers had to rely on synchronized collections to ensure thread safety. Synchronized 
		collections are collections that are accessed by multiple threads, but only one thread can access them at a time. This can lead to
		performance issues as threads have to wait for access to the collection.
		
		Concurrent collections solve this problem by allowing multiple threads to access the collection concurrently, without the need for explicit
		synchronization. This is achieved by using advanced data structures and algorithms that are designed to support  concurrent access.

Difference between Traditional Collections and Concurrent Collections :
		https://www.geeksforgeeks.org/difference-traditional-collections-concurrent-collections-java/
		
		Traditional Collections :	List, Set, Queue and its implemented Classes
		Concurrent Collection 	:	ConcurrentMap interface, ConcurrentHashMap class, CopyOnWriteArrayList class etc.
		
		1 : Most of the Classes which are present in Traditional Collections (i.e ArrayList, LinkedList, HashMap etc) are non-synchronized in nature
		and Hence there is no thread-safety. But All the classes present in Concurrent Collections are synchronized in nature. Therefore In 
		Concurrent classes, we dont have to take care about Thread-safety.
		
		2 : While Traditional Collections also have some classes (like Vector, Stack etc) which are synchronized in nature and Traditional
		Collections also have SynchronizedSet, SynchronizedList, SynchronizedMap methods through which we can get Synchronized version of 
		non-synchronized objects. But these above Synchronized classes are not good in terms of performance because of wide-locking mechanism .
		Whereas Concurrent Collections classes performance are relatively high than Traditional Collections classes.
		
		3 : In the Traditional Collections, if a thread is iterating a Collection object and if another thread try to add new element in that 
		iterating object simultaneously then we will get RuntimeException ConcurrentModificationException. Whereas In the above case, we will not
		get any Runtime Exception if we are Working with Concurrent Collections Classes.
		
		4 : Traditional Collections classes is good choice if we are not dealing with thread in our application. whereas because of the 
		Concurrent/Synchronized Collection we can use multiple Threads which are dealing with Collections Object. Therefore Concurrent Collections
		are best choice if we are dealing Multiple Threads in our application.
	
Diff b/w HashMap and ConcurrentHashMap : https://www.geeksforgeeks.org/difference-hashmap-concurrenthashmap/
		HashMap is the Class which is under Traditional Collection and ConcurrentHashMap is a Class which is under Concurrent Collections, apart
		from this there are various differences between them which are:
		
		1 : HashMap is non-Synchronized in nature i.e. HashMap is not Thread-safe whereas ConcurrentHashMap is Thread-safe in nature.
		
		2 : HashMap performance is relatively high because it is non-synchronized in nature and any number of threads can perform simultaneously. But
		ConcurrentHashMap performance is low sometimes because sometimes Threads are required to wait on ConcurrentHashMap.
		
		3 : While one thread is Iterating the HashMap object, if other thread try to add/modify the contents of Object then we will get Run-time 
		exception saying ConcurrentModificationException.Whereas In ConcurrentHashMap we wont get any exception while performing any modification
		at the time of Iteration.

		OR : HashMap isn't thread-safe at all. Thus, it is non-synchronized in nature. The ConcurrentHashMap, on the other hand, is thread-safe. 
		Due to non-synchronization, the performance of HashMap is relatively higher, and various threads are capable of performing simultaneously.
		

Traditional Collection :
		Interface : Map, List, set, queue, vector
		Implementation CLasses : Map - 
	